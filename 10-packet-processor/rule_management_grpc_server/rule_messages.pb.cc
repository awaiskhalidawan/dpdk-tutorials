// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rule_messages.proto

#include "rule_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace grpc_cpp_server {
class RuleCreateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuleCreateRequest> _instance;
} _RuleCreateRequest_default_instance_;
class RuleCreateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuleCreateResponse> _instance;
} _RuleCreateResponse_default_instance_;
class RuleDeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuleDeleteRequest> _instance;
} _RuleDeleteRequest_default_instance_;
class RuleDeleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuleDeleteResponse> _instance;
} _RuleDeleteResponse_default_instance_;
}  // namespace grpc_cpp_server
static void InitDefaultsscc_info_RuleCreateRequest_rule_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc_cpp_server::_RuleCreateRequest_default_instance_;
    new (ptr) ::grpc_cpp_server::RuleCreateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc_cpp_server::RuleCreateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuleCreateRequest_rule_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuleCreateRequest_rule_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_RuleCreateResponse_rule_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc_cpp_server::_RuleCreateResponse_default_instance_;
    new (ptr) ::grpc_cpp_server::RuleCreateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc_cpp_server::RuleCreateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuleCreateResponse_rule_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuleCreateResponse_rule_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_RuleDeleteRequest_rule_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc_cpp_server::_RuleDeleteRequest_default_instance_;
    new (ptr) ::grpc_cpp_server::RuleDeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc_cpp_server::RuleDeleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuleDeleteRequest_rule_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuleDeleteRequest_rule_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_RuleDeleteResponse_rule_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc_cpp_server::_RuleDeleteResponse_default_instance_;
    new (ptr) ::grpc_cpp_server::RuleDeleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpc_cpp_server::RuleDeleteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuleDeleteResponse_rule_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuleDeleteResponse_rule_5fmessages_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rule_5fmessages_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rule_5fmessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rule_5fmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rule_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc_cpp_server::RuleCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc_cpp_server::RuleCreateRequest, rule_str_),
  PROTOBUF_FIELD_OFFSET(::grpc_cpp_server::RuleCreateRequest, rule_client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc_cpp_server::RuleCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc_cpp_server::RuleCreateResponse, rule_client_id_),
  PROTOBUF_FIELD_OFFSET(::grpc_cpp_server::RuleCreateResponse, rule_server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc_cpp_server::RuleDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc_cpp_server::RuleDeleteRequest, rule_client_id_),
  PROTOBUF_FIELD_OFFSET(::grpc_cpp_server::RuleDeleteRequest, rule_server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc_cpp_server::RuleDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc_cpp_server::RuleDeleteResponse, rule_client_id_),
  PROTOBUF_FIELD_OFFSET(::grpc_cpp_server::RuleDeleteResponse, rule_server_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpc_cpp_server::RuleCreateRequest)},
  { 7, -1, sizeof(::grpc_cpp_server::RuleCreateResponse)},
  { 14, -1, sizeof(::grpc_cpp_server::RuleDeleteRequest)},
  { 21, -1, sizeof(::grpc_cpp_server::RuleDeleteResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc_cpp_server::_RuleCreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc_cpp_server::_RuleCreateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc_cpp_server::_RuleDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc_cpp_server::_RuleDeleteResponse_default_instance_),
};

const char descriptor_table_protodef_rule_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023rule_messages.proto\022\017grpc_cpp_server\"="
  "\n\021RuleCreateRequest\022\020\n\010rule_str\030\001 \001(\t\022\026\n"
  "\016rule_client_id\030\002 \001(\004\"D\n\022RuleCreateRespo"
  "nse\022\026\n\016rule_client_id\030\001 \001(\004\022\026\n\016rule_serv"
  "er_id\030\002 \001(\004\"C\n\021RuleDeleteRequest\022\026\n\016rule"
  "_client_id\030\001 \001(\004\022\026\n\016rule_server_id\030\002 \001(\004"
  "\"D\n\022RuleDeleteResponse\022\026\n\016rule_client_id"
  "\030\001 \001(\004\022\026\n\016rule_server_id\030\002 \001(\0042\337\001\n\013RuleM"
  "anager\022g\n\030StreamDataBidirectional1\022\".grp"
  "c_cpp_server.RuleCreateRequest\032#.grpc_cp"
  "p_server.RuleCreateResponse(\0010\001\022g\n\030Strea"
  "mDataBidirectional2\022\".grpc_cpp_server.Ru"
  "leDeleteRequest\032#.grpc_cpp_server.RuleDe"
  "leteResponse(\0010\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rule_5fmessages_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rule_5fmessages_2eproto_sccs[4] = {
  &scc_info_RuleCreateRequest_rule_5fmessages_2eproto.base,
  &scc_info_RuleCreateResponse_rule_5fmessages_2eproto.base,
  &scc_info_RuleDeleteRequest_rule_5fmessages_2eproto.base,
  &scc_info_RuleDeleteResponse_rule_5fmessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rule_5fmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rule_5fmessages_2eproto = {
  false, false, descriptor_table_protodef_rule_5fmessages_2eproto, "rule_messages.proto", 544,
  &descriptor_table_rule_5fmessages_2eproto_once, descriptor_table_rule_5fmessages_2eproto_sccs, descriptor_table_rule_5fmessages_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_rule_5fmessages_2eproto::offsets,
  file_level_metadata_rule_5fmessages_2eproto, 4, file_level_enum_descriptors_rule_5fmessages_2eproto, file_level_service_descriptors_rule_5fmessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rule_5fmessages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rule_5fmessages_2eproto)), true);
namespace grpc_cpp_server {

// ===================================================================

void RuleCreateRequest::InitAsDefaultInstance() {
}
class RuleCreateRequest::_Internal {
 public:
};

RuleCreateRequest::RuleCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc_cpp_server.RuleCreateRequest)
}
RuleCreateRequest::RuleCreateRequest(const RuleCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rule_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rule_str().empty()) {
    rule_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rule_str(),
      GetArena());
  }
  rule_client_id_ = from.rule_client_id_;
  // @@protoc_insertion_point(copy_constructor:grpc_cpp_server.RuleCreateRequest)
}

void RuleCreateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RuleCreateRequest_rule_5fmessages_2eproto.base);
  rule_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_client_id_ = PROTOBUF_ULONGLONG(0);
}

RuleCreateRequest::~RuleCreateRequest() {
  // @@protoc_insertion_point(destructor:grpc_cpp_server.RuleCreateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuleCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rule_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuleCreateRequest::ArenaDtor(void* object) {
  RuleCreateRequest* _this = reinterpret_cast< RuleCreateRequest* >(object);
  (void)_this;
}
void RuleCreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuleCreateRequest& RuleCreateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuleCreateRequest_rule_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void RuleCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc_cpp_server.RuleCreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rule_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rule_client_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleCreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rule_str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rule_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc_cpp_server.RuleCreateRequest.rule_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rule_client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rule_client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuleCreateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc_cpp_server.RuleCreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rule_str = 1;
  if (this->rule_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rule_str().data(), static_cast<int>(this->_internal_rule_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc_cpp_server.RuleCreateRequest.rule_str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rule_str(), target);
  }

  // uint64 rule_client_id = 2;
  if (this->rule_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_rule_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc_cpp_server.RuleCreateRequest)
  return target;
}

size_t RuleCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc_cpp_server.RuleCreateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rule_str = 1;
  if (this->rule_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rule_str());
  }

  // uint64 rule_client_id = 2;
  if (this->rule_client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rule_client_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuleCreateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc_cpp_server.RuleCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleCreateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuleCreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc_cpp_server.RuleCreateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc_cpp_server.RuleCreateRequest)
    MergeFrom(*source);
  }
}

void RuleCreateRequest::MergeFrom(const RuleCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc_cpp_server.RuleCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rule_str().size() > 0) {
    _internal_set_rule_str(from._internal_rule_str());
  }
  if (from.rule_client_id() != 0) {
    _internal_set_rule_client_id(from._internal_rule_client_id());
  }
}

void RuleCreateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc_cpp_server.RuleCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleCreateRequest::CopyFrom(const RuleCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc_cpp_server.RuleCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleCreateRequest::IsInitialized() const {
  return true;
}

void RuleCreateRequest::InternalSwap(RuleCreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rule_str_.Swap(&other->rule_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(rule_client_id_, other->rule_client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleCreateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuleCreateResponse::InitAsDefaultInstance() {
}
class RuleCreateResponse::_Internal {
 public:
};

RuleCreateResponse::RuleCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc_cpp_server.RuleCreateResponse)
}
RuleCreateResponse::RuleCreateResponse(const RuleCreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rule_client_id_, &from.rule_client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rule_server_id_) -
    reinterpret_cast<char*>(&rule_client_id_)) + sizeof(rule_server_id_));
  // @@protoc_insertion_point(copy_constructor:grpc_cpp_server.RuleCreateResponse)
}

void RuleCreateResponse::SharedCtor() {
  ::memset(&rule_client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rule_server_id_) -
      reinterpret_cast<char*>(&rule_client_id_)) + sizeof(rule_server_id_));
}

RuleCreateResponse::~RuleCreateResponse() {
  // @@protoc_insertion_point(destructor:grpc_cpp_server.RuleCreateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuleCreateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RuleCreateResponse::ArenaDtor(void* object) {
  RuleCreateResponse* _this = reinterpret_cast< RuleCreateResponse* >(object);
  (void)_this;
}
void RuleCreateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleCreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuleCreateResponse& RuleCreateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuleCreateResponse_rule_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void RuleCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc_cpp_server.RuleCreateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rule_client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rule_server_id_) -
      reinterpret_cast<char*>(&rule_client_id_)) + sizeof(rule_server_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleCreateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 rule_client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rule_client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rule_server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rule_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuleCreateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc_cpp_server.RuleCreateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rule_client_id = 1;
  if (this->rule_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rule_client_id(), target);
  }

  // uint64 rule_server_id = 2;
  if (this->rule_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_rule_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc_cpp_server.RuleCreateResponse)
  return target;
}

size_t RuleCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc_cpp_server.RuleCreateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 rule_client_id = 1;
  if (this->rule_client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rule_client_id());
  }

  // uint64 rule_server_id = 2;
  if (this->rule_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rule_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuleCreateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc_cpp_server.RuleCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleCreateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuleCreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc_cpp_server.RuleCreateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc_cpp_server.RuleCreateResponse)
    MergeFrom(*source);
  }
}

void RuleCreateResponse::MergeFrom(const RuleCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc_cpp_server.RuleCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rule_client_id() != 0) {
    _internal_set_rule_client_id(from._internal_rule_client_id());
  }
  if (from.rule_server_id() != 0) {
    _internal_set_rule_server_id(from._internal_rule_server_id());
  }
}

void RuleCreateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc_cpp_server.RuleCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleCreateResponse::CopyFrom(const RuleCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc_cpp_server.RuleCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleCreateResponse::IsInitialized() const {
  return true;
}

void RuleCreateResponse::InternalSwap(RuleCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuleCreateResponse, rule_server_id_)
      + sizeof(RuleCreateResponse::rule_server_id_)
      - PROTOBUF_FIELD_OFFSET(RuleCreateResponse, rule_client_id_)>(
          reinterpret_cast<char*>(&rule_client_id_),
          reinterpret_cast<char*>(&other->rule_client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleCreateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuleDeleteRequest::InitAsDefaultInstance() {
}
class RuleDeleteRequest::_Internal {
 public:
};

RuleDeleteRequest::RuleDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc_cpp_server.RuleDeleteRequest)
}
RuleDeleteRequest::RuleDeleteRequest(const RuleDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rule_client_id_, &from.rule_client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rule_server_id_) -
    reinterpret_cast<char*>(&rule_client_id_)) + sizeof(rule_server_id_));
  // @@protoc_insertion_point(copy_constructor:grpc_cpp_server.RuleDeleteRequest)
}

void RuleDeleteRequest::SharedCtor() {
  ::memset(&rule_client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rule_server_id_) -
      reinterpret_cast<char*>(&rule_client_id_)) + sizeof(rule_server_id_));
}

RuleDeleteRequest::~RuleDeleteRequest() {
  // @@protoc_insertion_point(destructor:grpc_cpp_server.RuleDeleteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuleDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RuleDeleteRequest::ArenaDtor(void* object) {
  RuleDeleteRequest* _this = reinterpret_cast< RuleDeleteRequest* >(object);
  (void)_this;
}
void RuleDeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuleDeleteRequest& RuleDeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuleDeleteRequest_rule_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void RuleDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc_cpp_server.RuleDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rule_client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rule_server_id_) -
      reinterpret_cast<char*>(&rule_client_id_)) + sizeof(rule_server_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 rule_client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rule_client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rule_server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rule_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuleDeleteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc_cpp_server.RuleDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rule_client_id = 1;
  if (this->rule_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rule_client_id(), target);
  }

  // uint64 rule_server_id = 2;
  if (this->rule_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_rule_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc_cpp_server.RuleDeleteRequest)
  return target;
}

size_t RuleDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc_cpp_server.RuleDeleteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 rule_client_id = 1;
  if (this->rule_client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rule_client_id());
  }

  // uint64 rule_server_id = 2;
  if (this->rule_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rule_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuleDeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc_cpp_server.RuleDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleDeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuleDeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc_cpp_server.RuleDeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc_cpp_server.RuleDeleteRequest)
    MergeFrom(*source);
  }
}

void RuleDeleteRequest::MergeFrom(const RuleDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc_cpp_server.RuleDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rule_client_id() != 0) {
    _internal_set_rule_client_id(from._internal_rule_client_id());
  }
  if (from.rule_server_id() != 0) {
    _internal_set_rule_server_id(from._internal_rule_server_id());
  }
}

void RuleDeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc_cpp_server.RuleDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleDeleteRequest::CopyFrom(const RuleDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc_cpp_server.RuleDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleDeleteRequest::IsInitialized() const {
  return true;
}

void RuleDeleteRequest::InternalSwap(RuleDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuleDeleteRequest, rule_server_id_)
      + sizeof(RuleDeleteRequest::rule_server_id_)
      - PROTOBUF_FIELD_OFFSET(RuleDeleteRequest, rule_client_id_)>(
          reinterpret_cast<char*>(&rule_client_id_),
          reinterpret_cast<char*>(&other->rule_client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleDeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuleDeleteResponse::InitAsDefaultInstance() {
}
class RuleDeleteResponse::_Internal {
 public:
};

RuleDeleteResponse::RuleDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc_cpp_server.RuleDeleteResponse)
}
RuleDeleteResponse::RuleDeleteResponse(const RuleDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rule_client_id_, &from.rule_client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rule_server_id_) -
    reinterpret_cast<char*>(&rule_client_id_)) + sizeof(rule_server_id_));
  // @@protoc_insertion_point(copy_constructor:grpc_cpp_server.RuleDeleteResponse)
}

void RuleDeleteResponse::SharedCtor() {
  ::memset(&rule_client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rule_server_id_) -
      reinterpret_cast<char*>(&rule_client_id_)) + sizeof(rule_server_id_));
}

RuleDeleteResponse::~RuleDeleteResponse() {
  // @@protoc_insertion_point(destructor:grpc_cpp_server.RuleDeleteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RuleDeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RuleDeleteResponse::ArenaDtor(void* object) {
  RuleDeleteResponse* _this = reinterpret_cast< RuleDeleteResponse* >(object);
  (void)_this;
}
void RuleDeleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleDeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuleDeleteResponse& RuleDeleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuleDeleteResponse_rule_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void RuleDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc_cpp_server.RuleDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rule_client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rule_server_id_) -
      reinterpret_cast<char*>(&rule_client_id_)) + sizeof(rule_server_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleDeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 rule_client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rule_client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rule_server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rule_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuleDeleteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc_cpp_server.RuleDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rule_client_id = 1;
  if (this->rule_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rule_client_id(), target);
  }

  // uint64 rule_server_id = 2;
  if (this->rule_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_rule_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc_cpp_server.RuleDeleteResponse)
  return target;
}

size_t RuleDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc_cpp_server.RuleDeleteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 rule_client_id = 1;
  if (this->rule_client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rule_client_id());
  }

  // uint64 rule_server_id = 2;
  if (this->rule_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rule_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuleDeleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc_cpp_server.RuleDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleDeleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuleDeleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc_cpp_server.RuleDeleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc_cpp_server.RuleDeleteResponse)
    MergeFrom(*source);
  }
}

void RuleDeleteResponse::MergeFrom(const RuleDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc_cpp_server.RuleDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rule_client_id() != 0) {
    _internal_set_rule_client_id(from._internal_rule_client_id());
  }
  if (from.rule_server_id() != 0) {
    _internal_set_rule_server_id(from._internal_rule_server_id());
  }
}

void RuleDeleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc_cpp_server.RuleDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleDeleteResponse::CopyFrom(const RuleDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc_cpp_server.RuleDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleDeleteResponse::IsInitialized() const {
  return true;
}

void RuleDeleteResponse::InternalSwap(RuleDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuleDeleteResponse, rule_server_id_)
      + sizeof(RuleDeleteResponse::rule_server_id_)
      - PROTOBUF_FIELD_OFFSET(RuleDeleteResponse, rule_client_id_)>(
          reinterpret_cast<char*>(&rule_client_id_),
          reinterpret_cast<char*>(&other->rule_client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleDeleteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc_cpp_server
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpc_cpp_server::RuleCreateRequest* Arena::CreateMaybeMessage< ::grpc_cpp_server::RuleCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc_cpp_server::RuleCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc_cpp_server::RuleCreateResponse* Arena::CreateMaybeMessage< ::grpc_cpp_server::RuleCreateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc_cpp_server::RuleCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc_cpp_server::RuleDeleteRequest* Arena::CreateMaybeMessage< ::grpc_cpp_server::RuleDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc_cpp_server::RuleDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc_cpp_server::RuleDeleteResponse* Arena::CreateMaybeMessage< ::grpc_cpp_server::RuleDeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc_cpp_server::RuleDeleteResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
