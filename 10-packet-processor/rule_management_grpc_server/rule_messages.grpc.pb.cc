// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rule_messages.proto

#include "rule_messages.pb.h"
#include "rule_messages.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc_cpp_server {

static const char* RuleManager_method_names[] = {
  "/grpc_cpp_server.RuleManager/StreamDataBidirectional1",
  "/grpc_cpp_server.RuleManager/StreamDataBidirectional2",
};

std::unique_ptr< RuleManager::Stub> RuleManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RuleManager::Stub> stub(new RuleManager::Stub(channel));
  return stub;
}

RuleManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StreamDataBidirectional1_(RuleManager_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_StreamDataBidirectional2_(RuleManager_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>* RuleManager::Stub::StreamDataBidirectional1Raw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>::Create(channel_.get(), rpcmethod_StreamDataBidirectional1_, context);
}

void RuleManager::Stub::experimental_async::StreamDataBidirectional1(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::grpc_cpp_server::RuleCreateRequest,::grpc_cpp_server::RuleCreateResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::grpc_cpp_server::RuleCreateRequest,::grpc_cpp_server::RuleCreateResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamDataBidirectional1_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>* RuleManager::Stub::AsyncStreamDataBidirectional1Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>::Create(channel_.get(), cq, rpcmethod_StreamDataBidirectional1_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>* RuleManager::Stub::PrepareAsyncStreamDataBidirectional1Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>::Create(channel_.get(), cq, rpcmethod_StreamDataBidirectional1_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>* RuleManager::Stub::StreamDataBidirectional2Raw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>::Create(channel_.get(), rpcmethod_StreamDataBidirectional2_, context);
}

void RuleManager::Stub::experimental_async::StreamDataBidirectional2(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::grpc_cpp_server::RuleDeleteRequest,::grpc_cpp_server::RuleDeleteResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::grpc_cpp_server::RuleDeleteRequest,::grpc_cpp_server::RuleDeleteResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamDataBidirectional2_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>* RuleManager::Stub::AsyncStreamDataBidirectional2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>::Create(channel_.get(), cq, rpcmethod_StreamDataBidirectional2_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>* RuleManager::Stub::PrepareAsyncStreamDataBidirectional2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>::Create(channel_.get(), cq, rpcmethod_StreamDataBidirectional2_, context, false, nullptr);
}

RuleManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleManager_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RuleManager::Service, ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>(
          [](RuleManager::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::grpc_cpp_server::RuleCreateResponse,
             ::grpc_cpp_server::RuleCreateRequest>* stream) {
               return service->StreamDataBidirectional1(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleManager_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RuleManager::Service, ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>(
          [](RuleManager::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::grpc_cpp_server::RuleDeleteResponse,
             ::grpc_cpp_server::RuleDeleteRequest>* stream) {
               return service->StreamDataBidirectional2(ctx, stream);
             }, this)));
}

RuleManager::Service::~Service() {
}

::grpc::Status RuleManager::Service::StreamDataBidirectional1(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleCreateResponse, ::grpc_cpp_server::RuleCreateRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuleManager::Service::StreamDataBidirectional2(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleDeleteResponse, ::grpc_cpp_server::RuleDeleteRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc_cpp_server

