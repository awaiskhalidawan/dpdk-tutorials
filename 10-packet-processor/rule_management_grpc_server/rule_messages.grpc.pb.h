// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rule_messages.proto
#ifndef GRPC_rule_5fmessages_2eproto__INCLUDED
#define GRPC_rule_5fmessages_2eproto__INCLUDED

#include "rule_messages.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_cpp_server {

class RuleManager final {
 public:
  static constexpr char const* service_full_name() {
    return "grpc_cpp_server.RuleManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>> StreamDataBidirectional1(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>>(StreamDataBidirectional1Raw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>> AsyncStreamDataBidirectional1(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>>(AsyncStreamDataBidirectional1Raw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>> PrepareAsyncStreamDataBidirectional1(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>>(PrepareAsyncStreamDataBidirectional1Raw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>> StreamDataBidirectional2(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>>(StreamDataBidirectional2Raw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>> AsyncStreamDataBidirectional2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>>(AsyncStreamDataBidirectional2Raw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>> PrepareAsyncStreamDataBidirectional2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>>(PrepareAsyncStreamDataBidirectional2Raw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StreamDataBidirectional1(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::grpc_cpp_server::RuleCreateRequest,::grpc_cpp_server::RuleCreateResponse>* reactor) = 0;
      #else
      virtual void StreamDataBidirectional1(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::grpc_cpp_server::RuleCreateRequest,::grpc_cpp_server::RuleCreateResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StreamDataBidirectional2(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::grpc_cpp_server::RuleDeleteRequest,::grpc_cpp_server::RuleDeleteResponse>* reactor) = 0;
      #else
      virtual void StreamDataBidirectional2(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::grpc_cpp_server::RuleDeleteRequest,::grpc_cpp_server::RuleDeleteResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>* StreamDataBidirectional1Raw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>* AsyncStreamDataBidirectional1Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>* PrepareAsyncStreamDataBidirectional1Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>* StreamDataBidirectional2Raw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>* AsyncStreamDataBidirectional2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>* PrepareAsyncStreamDataBidirectional2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>> StreamDataBidirectional1(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>>(StreamDataBidirectional1Raw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>> AsyncStreamDataBidirectional1(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>>(AsyncStreamDataBidirectional1Raw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>> PrepareAsyncStreamDataBidirectional1(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>>(PrepareAsyncStreamDataBidirectional1Raw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>> StreamDataBidirectional2(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>>(StreamDataBidirectional2Raw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>> AsyncStreamDataBidirectional2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>>(AsyncStreamDataBidirectional2Raw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>> PrepareAsyncStreamDataBidirectional2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>>(PrepareAsyncStreamDataBidirectional2Raw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StreamDataBidirectional1(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::grpc_cpp_server::RuleCreateRequest,::grpc_cpp_server::RuleCreateResponse>* reactor) override;
      #else
      void StreamDataBidirectional1(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::grpc_cpp_server::RuleCreateRequest,::grpc_cpp_server::RuleCreateResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StreamDataBidirectional2(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::grpc_cpp_server::RuleDeleteRequest,::grpc_cpp_server::RuleDeleteResponse>* reactor) override;
      #else
      void StreamDataBidirectional2(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::grpc_cpp_server::RuleDeleteRequest,::grpc_cpp_server::RuleDeleteResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>* StreamDataBidirectional1Raw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>* AsyncStreamDataBidirectional1Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>* PrepareAsyncStreamDataBidirectional1Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>* StreamDataBidirectional2Raw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>* AsyncStreamDataBidirectional2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>* PrepareAsyncStreamDataBidirectional2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StreamDataBidirectional1_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamDataBidirectional2_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StreamDataBidirectional1(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleCreateResponse, ::grpc_cpp_server::RuleCreateRequest>* stream);
    virtual ::grpc::Status StreamDataBidirectional2(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleDeleteResponse, ::grpc_cpp_server::RuleDeleteRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamDataBidirectional1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamDataBidirectional1() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StreamDataBidirectional1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDataBidirectional1(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleCreateResponse, ::grpc_cpp_server::RuleCreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamDataBidirectional1(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc_cpp_server::RuleCreateResponse, ::grpc_cpp_server::RuleCreateRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamDataBidirectional2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamDataBidirectional2() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamDataBidirectional2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDataBidirectional2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleDeleteResponse, ::grpc_cpp_server::RuleDeleteRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamDataBidirectional2(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc_cpp_server::RuleDeleteResponse, ::grpc_cpp_server::RuleDeleteRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StreamDataBidirectional1<WithAsyncMethod_StreamDataBidirectional2<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StreamDataBidirectional1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StreamDataBidirectional1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->StreamDataBidirectional1(context); }));
    }
    ~ExperimentalWithCallbackMethod_StreamDataBidirectional1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDataBidirectional1(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleCreateResponse, ::grpc_cpp_server::RuleCreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>* StreamDataBidirectional1(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc_cpp_server::RuleCreateRequest, ::grpc_cpp_server::RuleCreateResponse>* StreamDataBidirectional1(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StreamDataBidirectional2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StreamDataBidirectional2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->StreamDataBidirectional2(context); }));
    }
    ~ExperimentalWithCallbackMethod_StreamDataBidirectional2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDataBidirectional2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleDeleteResponse, ::grpc_cpp_server::RuleDeleteRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>* StreamDataBidirectional2(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc_cpp_server::RuleDeleteRequest, ::grpc_cpp_server::RuleDeleteResponse>* StreamDataBidirectional2(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_StreamDataBidirectional1<ExperimentalWithCallbackMethod_StreamDataBidirectional2<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_StreamDataBidirectional1<ExperimentalWithCallbackMethod_StreamDataBidirectional2<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StreamDataBidirectional1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamDataBidirectional1() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StreamDataBidirectional1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDataBidirectional1(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleCreateResponse, ::grpc_cpp_server::RuleCreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamDataBidirectional2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamDataBidirectional2() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamDataBidirectional2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDataBidirectional2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleDeleteResponse, ::grpc_cpp_server::RuleDeleteRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamDataBidirectional1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamDataBidirectional1() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StreamDataBidirectional1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDataBidirectional1(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleCreateResponse, ::grpc_cpp_server::RuleCreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamDataBidirectional1(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamDataBidirectional2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamDataBidirectional2() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamDataBidirectional2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDataBidirectional2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleDeleteResponse, ::grpc_cpp_server::RuleDeleteRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamDataBidirectional2(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StreamDataBidirectional1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StreamDataBidirectional1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->StreamDataBidirectional1(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_StreamDataBidirectional1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDataBidirectional1(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleCreateResponse, ::grpc_cpp_server::RuleCreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamDataBidirectional1(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamDataBidirectional1(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StreamDataBidirectional2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StreamDataBidirectional2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->StreamDataBidirectional2(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_StreamDataBidirectional2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamDataBidirectional2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::grpc_cpp_server::RuleDeleteResponse, ::grpc_cpp_server::RuleDeleteRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamDataBidirectional2(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamDataBidirectional2(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace grpc_cpp_server


#endif  // GRPC_rule_5fmessages_2eproto__INCLUDED
