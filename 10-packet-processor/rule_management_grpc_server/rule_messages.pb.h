// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rule_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rule_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rule_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rule_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rule_5fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rule_5fmessages_2eproto;
namespace grpc_cpp_server {
class RuleCreateRequest;
class RuleCreateRequestDefaultTypeInternal;
extern RuleCreateRequestDefaultTypeInternal _RuleCreateRequest_default_instance_;
class RuleCreateResponse;
class RuleCreateResponseDefaultTypeInternal;
extern RuleCreateResponseDefaultTypeInternal _RuleCreateResponse_default_instance_;
class RuleDeleteRequest;
class RuleDeleteRequestDefaultTypeInternal;
extern RuleDeleteRequestDefaultTypeInternal _RuleDeleteRequest_default_instance_;
class RuleDeleteResponse;
class RuleDeleteResponseDefaultTypeInternal;
extern RuleDeleteResponseDefaultTypeInternal _RuleDeleteResponse_default_instance_;
}  // namespace grpc_cpp_server
PROTOBUF_NAMESPACE_OPEN
template<> ::grpc_cpp_server::RuleCreateRequest* Arena::CreateMaybeMessage<::grpc_cpp_server::RuleCreateRequest>(Arena*);
template<> ::grpc_cpp_server::RuleCreateResponse* Arena::CreateMaybeMessage<::grpc_cpp_server::RuleCreateResponse>(Arena*);
template<> ::grpc_cpp_server::RuleDeleteRequest* Arena::CreateMaybeMessage<::grpc_cpp_server::RuleDeleteRequest>(Arena*);
template<> ::grpc_cpp_server::RuleDeleteResponse* Arena::CreateMaybeMessage<::grpc_cpp_server::RuleDeleteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc_cpp_server {

// ===================================================================

class RuleCreateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cpp_server.RuleCreateRequest) */ {
 public:
  inline RuleCreateRequest() : RuleCreateRequest(nullptr) {};
  virtual ~RuleCreateRequest();

  RuleCreateRequest(const RuleCreateRequest& from);
  RuleCreateRequest(RuleCreateRequest&& from) noexcept
    : RuleCreateRequest() {
    *this = ::std::move(from);
  }

  inline RuleCreateRequest& operator=(const RuleCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleCreateRequest& operator=(RuleCreateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuleCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuleCreateRequest* internal_default_instance() {
    return reinterpret_cast<const RuleCreateRequest*>(
               &_RuleCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RuleCreateRequest& a, RuleCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleCreateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuleCreateRequest* New() const final {
    return CreateMaybeMessage<RuleCreateRequest>(nullptr);
  }

  RuleCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuleCreateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuleCreateRequest& from);
  void MergeFrom(const RuleCreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleCreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cpp_server.RuleCreateRequest";
  }
  protected:
  explicit RuleCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rule_5fmessages_2eproto);
    return ::descriptor_table_rule_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleStrFieldNumber = 1,
    kRuleClientIdFieldNumber = 2,
  };
  // string rule_str = 1;
  void clear_rule_str();
  const std::string& rule_str() const;
  void set_rule_str(const std::string& value);
  void set_rule_str(std::string&& value);
  void set_rule_str(const char* value);
  void set_rule_str(const char* value, size_t size);
  std::string* mutable_rule_str();
  std::string* release_rule_str();
  void set_allocated_rule_str(std::string* rule_str);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rule_str();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rule_str(
      std::string* rule_str);
  private:
  const std::string& _internal_rule_str() const;
  void _internal_set_rule_str(const std::string& value);
  std::string* _internal_mutable_rule_str();
  public:

  // uint64 rule_client_id = 2;
  void clear_rule_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_client_id() const;
  void set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rule_client_id() const;
  void _internal_set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cpp_server.RuleCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_str_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rule_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RuleCreateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cpp_server.RuleCreateResponse) */ {
 public:
  inline RuleCreateResponse() : RuleCreateResponse(nullptr) {};
  virtual ~RuleCreateResponse();

  RuleCreateResponse(const RuleCreateResponse& from);
  RuleCreateResponse(RuleCreateResponse&& from) noexcept
    : RuleCreateResponse() {
    *this = ::std::move(from);
  }

  inline RuleCreateResponse& operator=(const RuleCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleCreateResponse& operator=(RuleCreateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuleCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuleCreateResponse* internal_default_instance() {
    return reinterpret_cast<const RuleCreateResponse*>(
               &_RuleCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RuleCreateResponse& a, RuleCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleCreateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuleCreateResponse* New() const final {
    return CreateMaybeMessage<RuleCreateResponse>(nullptr);
  }

  RuleCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuleCreateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuleCreateResponse& from);
  void MergeFrom(const RuleCreateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleCreateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cpp_server.RuleCreateResponse";
  }
  protected:
  explicit RuleCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rule_5fmessages_2eproto);
    return ::descriptor_table_rule_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleClientIdFieldNumber = 1,
    kRuleServerIdFieldNumber = 2,
  };
  // uint64 rule_client_id = 1;
  void clear_rule_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_client_id() const;
  void set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rule_client_id() const;
  void _internal_set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rule_server_id = 2;
  void clear_rule_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_server_id() const;
  void set_rule_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rule_server_id() const;
  void _internal_set_rule_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cpp_server.RuleCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_client_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rule_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RuleDeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cpp_server.RuleDeleteRequest) */ {
 public:
  inline RuleDeleteRequest() : RuleDeleteRequest(nullptr) {};
  virtual ~RuleDeleteRequest();

  RuleDeleteRequest(const RuleDeleteRequest& from);
  RuleDeleteRequest(RuleDeleteRequest&& from) noexcept
    : RuleDeleteRequest() {
    *this = ::std::move(from);
  }

  inline RuleDeleteRequest& operator=(const RuleDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleDeleteRequest& operator=(RuleDeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuleDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuleDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const RuleDeleteRequest*>(
               &_RuleDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RuleDeleteRequest& a, RuleDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleDeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuleDeleteRequest* New() const final {
    return CreateMaybeMessage<RuleDeleteRequest>(nullptr);
  }

  RuleDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuleDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuleDeleteRequest& from);
  void MergeFrom(const RuleDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cpp_server.RuleDeleteRequest";
  }
  protected:
  explicit RuleDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rule_5fmessages_2eproto);
    return ::descriptor_table_rule_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleClientIdFieldNumber = 1,
    kRuleServerIdFieldNumber = 2,
  };
  // uint64 rule_client_id = 1;
  void clear_rule_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_client_id() const;
  void set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rule_client_id() const;
  void _internal_set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rule_server_id = 2;
  void clear_rule_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_server_id() const;
  void set_rule_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rule_server_id() const;
  void _internal_set_rule_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cpp_server.RuleDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_client_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rule_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RuleDeleteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cpp_server.RuleDeleteResponse) */ {
 public:
  inline RuleDeleteResponse() : RuleDeleteResponse(nullptr) {};
  virtual ~RuleDeleteResponse();

  RuleDeleteResponse(const RuleDeleteResponse& from);
  RuleDeleteResponse(RuleDeleteResponse&& from) noexcept
    : RuleDeleteResponse() {
    *this = ::std::move(from);
  }

  inline RuleDeleteResponse& operator=(const RuleDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleDeleteResponse& operator=(RuleDeleteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuleDeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuleDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const RuleDeleteResponse*>(
               &_RuleDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RuleDeleteResponse& a, RuleDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleDeleteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuleDeleteResponse* New() const final {
    return CreateMaybeMessage<RuleDeleteResponse>(nullptr);
  }

  RuleDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuleDeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuleDeleteResponse& from);
  void MergeFrom(const RuleDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleDeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cpp_server.RuleDeleteResponse";
  }
  protected:
  explicit RuleDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rule_5fmessages_2eproto);
    return ::descriptor_table_rule_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleClientIdFieldNumber = 1,
    kRuleServerIdFieldNumber = 2,
  };
  // uint64 rule_client_id = 1;
  void clear_rule_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_client_id() const;
  void set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rule_client_id() const;
  void _internal_set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rule_server_id = 2;
  void clear_rule_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_server_id() const;
  void set_rule_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rule_server_id() const;
  void _internal_set_rule_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cpp_server.RuleDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_client_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rule_server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rule_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RuleCreateRequest

// string rule_str = 1;
inline void RuleCreateRequest::clear_rule_str() {
  rule_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RuleCreateRequest::rule_str() const {
  // @@protoc_insertion_point(field_get:grpc_cpp_server.RuleCreateRequest.rule_str)
  return _internal_rule_str();
}
inline void RuleCreateRequest::set_rule_str(const std::string& value) {
  _internal_set_rule_str(value);
  // @@protoc_insertion_point(field_set:grpc_cpp_server.RuleCreateRequest.rule_str)
}
inline std::string* RuleCreateRequest::mutable_rule_str() {
  // @@protoc_insertion_point(field_mutable:grpc_cpp_server.RuleCreateRequest.rule_str)
  return _internal_mutable_rule_str();
}
inline const std::string& RuleCreateRequest::_internal_rule_str() const {
  return rule_str_.Get();
}
inline void RuleCreateRequest::_internal_set_rule_str(const std::string& value) {
  
  rule_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RuleCreateRequest::set_rule_str(std::string&& value) {
  
  rule_str_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cpp_server.RuleCreateRequest.rule_str)
}
inline void RuleCreateRequest::set_rule_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rule_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cpp_server.RuleCreateRequest.rule_str)
}
inline void RuleCreateRequest::set_rule_str(const char* value,
    size_t size) {
  
  rule_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cpp_server.RuleCreateRequest.rule_str)
}
inline std::string* RuleCreateRequest::_internal_mutable_rule_str() {
  
  return rule_str_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RuleCreateRequest::release_rule_str() {
  // @@protoc_insertion_point(field_release:grpc_cpp_server.RuleCreateRequest.rule_str)
  return rule_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuleCreateRequest::set_allocated_rule_str(std::string* rule_str) {
  if (rule_str != nullptr) {
    
  } else {
    
  }
  rule_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule_str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cpp_server.RuleCreateRequest.rule_str)
}
inline std::string* RuleCreateRequest::unsafe_arena_release_rule_str() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grpc_cpp_server.RuleCreateRequest.rule_str)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rule_str_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RuleCreateRequest::unsafe_arena_set_allocated_rule_str(
    std::string* rule_str) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rule_str != nullptr) {
    
  } else {
    
  }
  rule_str_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rule_str, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cpp_server.RuleCreateRequest.rule_str)
}

// uint64 rule_client_id = 2;
inline void RuleCreateRequest::clear_rule_client_id() {
  rule_client_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleCreateRequest::_internal_rule_client_id() const {
  return rule_client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleCreateRequest::rule_client_id() const {
  // @@protoc_insertion_point(field_get:grpc_cpp_server.RuleCreateRequest.rule_client_id)
  return _internal_rule_client_id();
}
inline void RuleCreateRequest::_internal_set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rule_client_id_ = value;
}
inline void RuleCreateRequest::set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rule_client_id(value);
  // @@protoc_insertion_point(field_set:grpc_cpp_server.RuleCreateRequest.rule_client_id)
}

// -------------------------------------------------------------------

// RuleCreateResponse

// uint64 rule_client_id = 1;
inline void RuleCreateResponse::clear_rule_client_id() {
  rule_client_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleCreateResponse::_internal_rule_client_id() const {
  return rule_client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleCreateResponse::rule_client_id() const {
  // @@protoc_insertion_point(field_get:grpc_cpp_server.RuleCreateResponse.rule_client_id)
  return _internal_rule_client_id();
}
inline void RuleCreateResponse::_internal_set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rule_client_id_ = value;
}
inline void RuleCreateResponse::set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rule_client_id(value);
  // @@protoc_insertion_point(field_set:grpc_cpp_server.RuleCreateResponse.rule_client_id)
}

// uint64 rule_server_id = 2;
inline void RuleCreateResponse::clear_rule_server_id() {
  rule_server_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleCreateResponse::_internal_rule_server_id() const {
  return rule_server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleCreateResponse::rule_server_id() const {
  // @@protoc_insertion_point(field_get:grpc_cpp_server.RuleCreateResponse.rule_server_id)
  return _internal_rule_server_id();
}
inline void RuleCreateResponse::_internal_set_rule_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rule_server_id_ = value;
}
inline void RuleCreateResponse::set_rule_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rule_server_id(value);
  // @@protoc_insertion_point(field_set:grpc_cpp_server.RuleCreateResponse.rule_server_id)
}

// -------------------------------------------------------------------

// RuleDeleteRequest

// uint64 rule_client_id = 1;
inline void RuleDeleteRequest::clear_rule_client_id() {
  rule_client_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleDeleteRequest::_internal_rule_client_id() const {
  return rule_client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleDeleteRequest::rule_client_id() const {
  // @@protoc_insertion_point(field_get:grpc_cpp_server.RuleDeleteRequest.rule_client_id)
  return _internal_rule_client_id();
}
inline void RuleDeleteRequest::_internal_set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rule_client_id_ = value;
}
inline void RuleDeleteRequest::set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rule_client_id(value);
  // @@protoc_insertion_point(field_set:grpc_cpp_server.RuleDeleteRequest.rule_client_id)
}

// uint64 rule_server_id = 2;
inline void RuleDeleteRequest::clear_rule_server_id() {
  rule_server_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleDeleteRequest::_internal_rule_server_id() const {
  return rule_server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleDeleteRequest::rule_server_id() const {
  // @@protoc_insertion_point(field_get:grpc_cpp_server.RuleDeleteRequest.rule_server_id)
  return _internal_rule_server_id();
}
inline void RuleDeleteRequest::_internal_set_rule_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rule_server_id_ = value;
}
inline void RuleDeleteRequest::set_rule_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rule_server_id(value);
  // @@protoc_insertion_point(field_set:grpc_cpp_server.RuleDeleteRequest.rule_server_id)
}

// -------------------------------------------------------------------

// RuleDeleteResponse

// uint64 rule_client_id = 1;
inline void RuleDeleteResponse::clear_rule_client_id() {
  rule_client_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleDeleteResponse::_internal_rule_client_id() const {
  return rule_client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleDeleteResponse::rule_client_id() const {
  // @@protoc_insertion_point(field_get:grpc_cpp_server.RuleDeleteResponse.rule_client_id)
  return _internal_rule_client_id();
}
inline void RuleDeleteResponse::_internal_set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rule_client_id_ = value;
}
inline void RuleDeleteResponse::set_rule_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rule_client_id(value);
  // @@protoc_insertion_point(field_set:grpc_cpp_server.RuleDeleteResponse.rule_client_id)
}

// uint64 rule_server_id = 2;
inline void RuleDeleteResponse::clear_rule_server_id() {
  rule_server_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleDeleteResponse::_internal_rule_server_id() const {
  return rule_server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RuleDeleteResponse::rule_server_id() const {
  // @@protoc_insertion_point(field_get:grpc_cpp_server.RuleDeleteResponse.rule_server_id)
  return _internal_rule_server_id();
}
inline void RuleDeleteResponse::_internal_set_rule_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rule_server_id_ = value;
}
inline void RuleDeleteResponse::set_rule_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rule_server_id(value);
  // @@protoc_insertion_point(field_set:grpc_cpp_server.RuleDeleteResponse.rule_server_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc_cpp_server

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rule_5fmessages_2eproto
